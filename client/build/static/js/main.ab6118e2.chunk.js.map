{"version":3,"sources":["queries/queries.js","components/AddPlace.js","components/Place.js","components/LunchOptions.js","App.js","serviceWorker.js","index.js"],"names":["VENUES","gql","VOTED_UP_DOWN","VOTE_UP","VOTE_DOWN","ADD_VENUE","AddPlace","useMutation","add","data","voteUp","useState","value","setValue","onSubmit","e","preventDefault","variables","name","Input","placeholder","onChange","target","autoFocus","className","Button","variant","color","type","Place","votes","subscribeToFreshVotes","voteDown","onClick","Typography","LunchOptions","options","useEffect","console","log","Grid","container","spacing","sort","a","b","map","venue","index","item","xs","key","Paper","App","useQuery","loading","subscribeToMore","CssBaseline","Container","maxWidth","venues","document","updateQuery","prev","subscriptionData","updatedVenueInfo","votedUpDown","filter","aitem","find","bitem","concat","Boolean","window","location","hostname","match","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","link","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab6118e2.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nexport const VENUES = gql`\n  {\n    venues {\n      name\n      votes\n    }\n  }\n`;\n\nexport const VENUE_ADDED = gql`\n  subscription {\n    venueAdded {\n      name\n      votes\n    }\n  }\n`;\n\nexport const VOTED_UP_DOWN = gql`\n  subscription {\n    votedUpDown {\n      name\n      votes\n    }\n  }\n`;\n\nexport const VOTE_UP = gql`\n  mutation VoteUp($name: String) {\n    voteUp(name: $name) {\n      name\n      votes\n    }\n  }\n`;\n\nexport const VOTE_DOWN = gql`\n  mutation VoteDown($name: String) {\n    voteDown(name: $name) {\n      name\n      votes\n    }\n  }\n`;\n\nexport const ADD_VENUE = gql`\n  mutation AddVenue($name: String) {\n    addVenue(name: $name) {\n      name\n      votes\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_VENUE, VOTE_UP } from '../queries/queries';\n\nconst AddPlace = () => {\n  \n  const [add, { data }] = useMutation(ADD_VENUE);\n  //vote up because it makes logical sence \n  // but also to trigger the subscription\n  const [ voteUp, response ] = useMutation(VOTE_UP);\n  const [value, setValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    add({\n      variables: { name: value },\n    });\n    setValue('');\n    voteUp({\n      variables: {\n        name: value\n      }\n    })\n  };\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        placeholder=\"Add a venue\"\n        name=\"name\"\n        onChange={handleChange}\n        value={value}\n        autoFocus\n        className=\"place-input\"\n      />\n      <br/><br/>\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n        Add this place\n      </Button>\n    </form>\n  );\n};\n\nexport default AddPlace;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { VOTE_UP, VOTE_DOWN } from '../queries/queries';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst Place = ({ name, votes, subscribeToFreshVotes }) => {\n  \n  const [voteUp, { data }] = useMutation(VOTE_UP);\n  const [voteDown, { data: fresh }] = useMutation(VOTE_DOWN);\n\n  return (\n    <div>\n      <div className=\"place-button-title-group\">\n        <Button\n          onClick={() => voteDown({ variables: { name } })}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          üëéNope\n        </Button>\n        <Typography variant=\"h6\">{name}</Typography>\n        <Button\n          onClick={() => voteUp({ variables: { name } })}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Yay üëç\n        </Button>\n      </div>\n      <Typography variant=\"body1\">Votes: {votes}</Typography>\n    </div>\n  );\n};\n\nexport default Place;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport Place from './Place';\nimport { useSubscription } from '@apollo/react-hooks';\nimport { VENUE_ADDED } from '../queries/queries';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst LunchOptions = ({ options = [], subscribeToFreshVotes }) => {\n  useEffect(() => {\n    subscribeToFreshVotes();\n  }, []);\n\n  // comenting it out to avoid duplicate entry in the list\n  // that is a great way to implement subscriptions with apollo hooks\n  // const { data, loading } = useSubscription(VENUE_ADDED);\n  console.log(options)\n  return (\n    <Grid container spacing={1}>\n      {options\n        .sort((a, b) => b.votes - a.votes)\n        .map((venue, index) => (\n          <Grid item xs={8} key={`place-${index}`}>\n            <Paper className=\"venue-item\">\n              <Place {...venue} subscribeToFreshVotes={subscribeToFreshVotes} />\n            </Paper>\n          </Grid>\n        ))}\n      {/* {!loading && (\n        <Grid item xs={8}>\n          <Paper className=\"venue-item\">\n            <Place\n              {...data.venueAdded}\n              subscribeToFreshVotes={subscribeToFreshVotes}\n            />\n          </Paper>\n        </Grid>\n      )} */}\n    </Grid>\n  );\n};\n\nexport default LunchOptions;\n","import React from 'react';\nimport './App.css'\nimport AddPlace from './components/AddPlace';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport LunchOptions from './components/LunchOptions';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { useQuery } from '@apollo/react-hooks';\nimport { VENUES, VOTED_UP_DOWN } from './queries/queries';\n\nfunction App() {\n  const { data, loading, subscribeToMore } = useQuery(VENUES);\n  \n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Grid container spacing={2}>\n          <Grid item>\n            <Paper className=\"padding-15\">\n              <Typography variant=\"h2\">Lunch Voter!</Typography>\n            </Paper>\n          </Grid>\n          <Grid item xs={8}>\n            <Paper className=\"padding-15\">\n              <AddPlace/>\n            </Paper>\n          </Grid>\n        </Grid>\n        <div>\n          {!loading && (\n            <LunchOptions\n              options={data.venues}\n              subscribeToFreshVotes={() =>\n                subscribeToMore({\n                  document: VOTED_UP_DOWN,\n                  variables: {},\n                  updateQuery: (prev, { subscriptionData }) => {\n                    if (!subscriptionData.data) return prev;\n                    const updatedVenueInfo = subscriptionData.data.votedUpDown;\n                    const x = prev.venues.filter(\n                      aitem =>\n                        ![updatedVenueInfo].find(\n                          bitem => aitem.name === bitem.name\n                        )\n                    );\n                    const y = x.concat(updatedVenueInfo);\n\n                    return { venues: y };\n                  },\n                })\n              }\n            />\n          )}\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {ApolloClient} from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport * as serviceWorker from './serviceWorker';\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:8001/graphql'\n});\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:8001/graphql`,\n  options: {\n    reconnect: true\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\n// in this case all the request go to the same address anyway\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(  \n<ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}